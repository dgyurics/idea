package idea.model.entity;

import java.util.Date;
import java.util.UUID;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.MapsId;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "auth_refresh_token")
public class Refresh {
  // TODO: add expiry date, perhaps 12 months?
  // TODO: add additional security when accessing from new browser
  // TODO: track how often user is asking for new JWT (prevent too many requests)

  @Id
  @GeneratedValue
  private UUID id; // UUID generated by JVM

  // creates a foreign key column, user_id, and references User table/entity
  @OneToOne
  @OnDelete(action = OnDeleteAction.CASCADE)
  private User user;

  // FIXME: these entries have the potential to remain in database forever, fix this
  @Column(nullable = false, updatable = false)
  @CreationTimestamp
  private Date createTimestamp;
}
